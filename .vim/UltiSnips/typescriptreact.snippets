snippet imr "Import React"
import React from 'react';
endsnippet

snippet imro "Import React as Object"
import * as React from 'react';
endsnippet

snippet imrc "Import React Component"
import React, { Component } from 'react';
endsnippet

snippet imrpc "Import React Pure Component"
import React, { PureComponent } from 'react';
endsnippet

snippet imrn "Import React-Native Element"
import { $1 } from 'react-native';
endsnippet

snippet ims "Import Styled-Components"
import styled from 'styled-components';
endsnippet

snippet imsn "Import Styled-Components Native"
import styled from 'styled-components/native';
endsnippet

snippet impt "Import PropTypes"
import PropTypes from 'prop-types';
endsnippet

snippet rct "Redux Constant"
export const $1 = '$1';
endsnippet

snippet crr "Connect Redux"
import { connect } from 'react-redux';
endsnippet

snippet sl "Stateless Component"
const $1 = () => (
  $2
);

export default $1;
endsnippet

snippet slr "Stateless Component Return"
const $1 = () => {
  return (
    $2
  );
}

export default $1;
endsnippet

snippet slc "Stateless Component Function"
function $1($2) {
  $3
}

export default $1;
endsnippet

snippet ccs "Component Class"
class $1 extends Component {
  state = { $2 }
  render() {
    return (
      $3
    );
  }
}

export default $1;
endsnippet

snippet cccs "Component Class With Constructor"
class $1 extends Component {
  constructor(props) {
    super(props);
    this.state = { $2 };
  }
  render() {
    return (
      $3
    );
  }
}

export default $1;
endsnippet

snippet ccsf "Component Class FlowType"
type P = {
  $1
};

type S = {
  $2
};

class $3 extends Component<P, S> {
  constructor(props) {
    super(props);
    this.state = { $4 };
  }
  render() {
    return (
      $5
    );
  }
}

export default $3;
endsnippet

snippet pcs "PureComponent Class"
class $1 extends PureComponent {
  state = { $2 }
  render() {
    return (
      $3
    );
  }
}

export default $1;

endsnippet

snippet pccs "PureComponent Class With Constructor"
class $1 extends PureComponent {
  constructor(props) {
    super(props);
    this.state = { $2 };
  }
  render() {
    return (
      $3
    );
  }
}

export default $1;
endsnippet

snippet pcsf "PureComponent Class FlowType"
type P = {
  $1
};

type S = {
  $2
};

class $3 extends PureComponent<P, S> {
  constructor(props) {
    super(props);
    this.state = { $4 };
  }
  render() {
    return (
      $5
    );
  }
}

export default $3;
endsnippet

snippet ccsr "Component Class With Redux"
class $1 extends Component {
  state = { $2 }
  render() {
    return (
      $3
    );
  }
}

export default connect($4, $5)($1);
endsnippet

snippet edccs "Export default Component Class"
export default class $1 extends Component {
  state = { $2 }
  render() {
    return (
      $3
    );
  }
}
endsnippet

snippet rrd "Redux Reducer"
export default (state = $1, action) => {
  switch (action.type) {
    case $2:
      $3
    default:
      return state;
  }
};
endsnippet

snippet rpf "Redux pure function"
export const $1 = '$1';

export function $2($3) {
  return {
    type: $1,
    $3
  }
}
endsnippet

snippet rpc "Redux pure function const"
export const $1 = '$1';

export const $2 = $3 => ({
  type: $1,
  $3
});
endsnippet

snippet cwm "ComponentWillMount"
componentWillMount() {
  $1
}
endsnippet

snippet cwu "ComponentWillUpdate"
componentWillUpdate() {
  $1
}
endsnippet

snippet cdu "ComponentDidUpdate"
componentDidUpdate(prevProps, prevState) {
  $1
}
endsnippet

snippet scu "ShouldComponentUpdate"
shouldComponentUpdate(nextProps, nextState, nextContext) {
  $1
}
endsnippet

snippet cdm "ComponentDidMount"
componentDidMount() {
  $1
}
endsnippet

snippet cwum "ComponentWillUnmoount"
componentWillUnmount() {
  $1
}
endsnippet

snippet cwrp "ComponentWillReceiveProps"
componentWillReceiveProps(nextProps) {
  $1
}
endsnippet

snippet cdc "ComponentDidCatch"
componentDidCatch(error, info) {
  $1
}
endsnippet

snippet cct "Create Context"
const $1Context = createContext($2);

class $1Provider extends Component {
  state = {
    $3
  }

  render() {
    return (
      <$1Context.Provider value={{ state: { $3 }, actions: {} }}>
        {this.props.children}
      </$1Context.Provider>
    );
  }
}

export default $1Provider;
endsnippet

snippet gds "getDerivedStateFromProps"
static getDerivedStateFromProps(nextProps, prevState) {
  $1
}
endsnippet

snippet rnss "StyleSheet Style"
const styles = StyleSheet.create({
  $1
});
endsnippet

snippet ess "EStyleSheet"
import EStyleSheet from 'react-native-extended-stylesheet';

const styles = EStyleSheet.create({
  $1
});

export default styles;
endsnippet

snippet ed "Export default"
export default $1;
endsnippet

snippet edl "Eslint Disable Line"
// eslint-disable-line
endsnippet

snippet ednl "Eslint Disable Next Line"
// eslint-disable-next-line
endsnippet

snippet styc "Styled Component"
const $1 = styled.$2`
  $3
`
endsnippet

snippet estyc "Export Style Component"
export const $1 = styled.$2`
  $3
`
endsnippet

snippet edstyc "Export default Styled Component"
export default styled.$1`
  $2
`
endsnippet

snippet cmmb "Comment Big Block"
/**
|--------------------------------------------------
| $1
|--------------------------------------------------
*/
endsnippet

snippet log "Console Log"
console.log('====================================');
console.log($1);
console.log('====================================');
endsnippet

snippet cl "Standard console.log"
console.log($1);
endsnippet

snippet tt "Test"
test('$1', () => {
  $2
});
endsnippet

snippet tdesc "Test Describe"
describe('$1', () => {
  $2
});
endsnippet

snippet tit "Test It"
it('should $1', $2($3) => {
  $4
});
endsnippet

snippet ffm "FlowFixMe"
// $FlowFixMe
endsnippet

snippet rnstory "React-Native Story"
import React from 'react';
import { storiesOf } from '@storybook/react-native';

storiesOf('$1', module)
  .add('default', () => $2);
endsnippet

snippet rstory "React Story"
import React from 'react';
import { storiesOf } from '@storybook/react';

storiesOf('$1', module)
  .add('default', () => $2);
endsnippet

snippet rue "React useEffect"
React.useEffect(() => {
  $1
}, []);
endsnippet
